#lang pie

;@begin code PairVec (the Vec type implemented with Pairs)
; PairVec ~ Vec
; (PairVec a k) is a list of k a's
; it gets expanded as (Pair a (Pair a (Pair a ... (k times) Trivial)))
(claim PairVec
  (Pi ((a U) (k Nat)) U))
(define PairVec
  (lambda (a k)
    (iter-Nat k
      Trivial ; (PairVec a 0) is Trivial
      (lambda (u) (Pair a u)))))

; pvnil is the constructor for (PairVec a 0)
(claim pv.nil Trivial)
(define pv.nil sole)

; pv:: is identical to the builtin cons
(claim pv:: (Pi ((a U) (k Nat)) (-> a (PairVec a k) (PairVec a (add1 k)))))
(define pv::
  (lambda (a k e p) (cons e p)))

; pv.head is identical to the builtin car
(claim pv.head
  (Pi ((a U) (k Nat)) (-> (PairVec a (add1 k)) a)))
(define pv.head
  (lambda (a k p) (car p)))

; pv.tail is identical to the builtin cdr
(claim pv.tail
  (Pi ((a U) (k Nat)) (-> (PairVec a (add1 k)) (PairVec a k))))
(define pv.tail
  (lambda (a k p) (cdr p)))

; a copy of the type of ind-Vec from the Pie reference
(claim ind-PairVec
  (Pi ((E U)
       (target-1 Nat)
       (target-2 (PairVec E target-1))
       (motive (Pi ((k Nat)) (-> (PairVec E k) U)))
       (base (motive zero pv.nil))
       (step (Pi ((k Nat)
                  (e E)
                  (es (PairVec E k)))
                  (-> (motive k es) (motive (add1 k) (cons e es))))))
    (motive target-1 target-2)))
; we use induction to create a function that can inductively eliminate
; a k+1-length PairVec from a function that can inductively eliminate
; a k-length Pairvec
(define ind-PairVec
    (lambda (E target-1 target-2 motive base step)
        ((ind-Nat
            target-1
            (lambda (i) (Pi ((w (PairVec E i))) (motive i w)))
            (lambda (w) base)
            (lambda (k-1 almost-ind)
                (lambda (w)
                    (step k-1 (car w) (cdr w) (almost-ind (cdr w))))))
        target-2)))
;@end