(claim n Nat)
(define n 3)

(claim m Nat)
(define m 2)

(claim Q U)
(define Q (Set n))

(claim q0 Q)
(define q0 (left sole))

(claim q1 Q)
(define q1 (right (left sole)))

(claim q2 Q)
(define q2 (right (right (left sole))))

(claim A U)
(define A (Set m))

(claim a A)
(define a (left sole))

(claim b A)
(define b (right (left sole)))

(claim delta (nfa.Delta n m))
(define delta
  (lambda (q c-or-epsilon)
    (ind-Either
      c-or-epsilon
      (lambda (_) (Subset Q))
      (lambda (c)
        (elim-Set (Subset Q) n q
          (lambda (@q0)
            (elim-Set (Subset Q) m c
              (lambda (@a) (singleton n q1))
              (lambda (@b) (empty-set Q))))
          (lambda (@q1)
            (elim-Set (Subset Q) m c
              (lambda (@a) (empty-set Q))
              (lambda (@b) (singleton n q2))))
          (lambda (@q2)
            (elim-Set (Subset Q) m c
              (lambda (@a) (singleton n q0))
              (lambda (@b) (empty-set Q))))))
      (lambda (e)
        (elim-Set (Subset Q) n q
          (lambda (@q0) (empty-set Q))
          (lambda (@q1) (empty-set Q))
          (lambda (@q2) (singleton n q0)))))))

(claim F (Subset Q))
(define F (singleton n q0))

'NFA-RESULTS

; True (left sole)
(nfa.runner n m delta q0 F
  0)

; False (right sole)
(nfa.runner n m delta q0 F
  1 a)

; False (right sole)
(nfa.runner n m delta q0 F
  1 b)

; True (left sole)
(nfa.runner n m delta q0 F
  2 a b)

; False (right sole)
(nfa.runner n m delta q0 F
  2 b b)

; True (left sole)
(nfa.runner n m delta q0 F
  3 a b a)

; False (right sole)
(nfa.runner n m delta q0 F
  3 a b b)

; True (left sole)
(nfa.runner n m delta q0 F
  5 a b a a b)

; True (left sole)
(nfa.runner n m delta q0 F
  7 a b a a b a b)

(claim N->D
  (DFA (^ 2 n) m))
(define N->D
  (nfa->dfa n m delta q0 F))

(claim Dn Nat)
(define Dn (car N->D))

(claim Ddelta (dfa.Delta Dn m))
(define Ddelta (car (cdr (cdr N->D))))

(claim Dq_s (Set Dn))
(define Dq_s
  (car (cdr (cdr (cdr N->D)))))

(claim DF (Subset (Set Dn)))
(define DF
  (cdr (cdr (cdr (cdr N->D)))))

'DFA-RESULTS

; True (left sole)
(dfa.runner Dn m Ddelta Dq_s DF
  0)

; False (right sole)
(dfa.runner Dn m Ddelta Dq_s DF
  1 a)

; False (right sole)
(dfa.runner Dn m Ddelta Dq_s DF
  1 b)

; True (left sole)
(dfa.runner Dn m Ddelta Dq_s DF
  2 a b)

; False (right sole)
(dfa.runner Dn m Ddelta Dq_s DF
  2 b b)

; True (left sole)
(dfa.runner Dn m Ddelta Dq_s DF
  3 a b a)

; False (right sole)
(dfa.runner Dn m Ddelta Dq_s DF
  3 a b b)

; True (left sole)
(dfa.runner Dn m Ddelta Dq_s DF
  5 a b a a b)

; True (left sole)
(dfa.runner Dn m Ddelta Dq_s DF
  7 a b a a b a b)