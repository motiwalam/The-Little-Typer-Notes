#lang pie

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Some Arithmetic Functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; succ: x -> x + 1
; pred: x -> min(0, x-1)
;    +: x,y -> x + y
;    *: x,y -> x * y
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(claim succ
  (-> Nat Nat))
(define succ
  (lambda (n) (add1 n)))

(claim pred
  (-> Nat Nat))
(define pred
  (lambda (n)
    (which-Nat
      n
      0
      (lambda (n) n))))

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (m n)
    (iter-Nat
     n
     m
     succ)))

(claim *
  (-> Nat Nat Nat))
(define *
  (lambda (m n)
    (iter-Nat
      n
      0
      (+ m))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Some Arithmetic Proofs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;        associativity of + : a + (b + c) = (a + b) + c 
;        commutativity of + : a + b = b + a
;        commutativity of * : a * b = b * a
; right distributivity of * : (a + b) * c = (a * c) + (b * c)
;             either-0-or>0 : for all n \in N, either n = 0 or n > 0
;     an algebraic identity : i = q*(m+1) + m => i+1 = (q+1)(m+1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; associativity of +
(claim +associates
  (Pi ((a Nat) (b Nat) (c Nat))
    (= Nat (+ a (+ b c)) (+ (+ a b) c))))
(define +associates
  (lambda (a b c)
    (ind-Nat
      c
      (lambda (i) (= Nat (+ a (+ b i)) (+ (+ a b) i)))
      (same (+ a b))
      (lambda (k-1 almost)
        (cong almost succ)))))

; commutativity of +
(claim +0-commutes
  (Pi ((m Nat)) (= Nat (+ m 0) (+ 0 m))))
(define +0-commutes
  (lambda (m)
    (ind-Nat
      m
      (lambda (i) (= Nat (+ i 0) (+ 0 i)))
      (same 0)
      (lambda (k-1 almost) (cong almost succ)))))

(claim +1-associates
  (Pi ((m Nat) (n Nat))
    (= Nat (+ (add1 m) n) (+ m (add1 n)))))
(define +1-associates
  (lambda (m n)
    (ind-Nat
      n
      (lambda (i) (= Nat (+ (add1 m) i) (+ m (add1 i))))
      (same (add1 m))
      (lambda (n-1 almost)
        (cong almost succ)))))

(claim +commutes
  (Pi ((m Nat) (n Nat)) (= Nat (+ m n) (+ n m))))
(define +commutes
  (lambda (m n)
    (ind-Nat
      n
      (lambda (i) (= Nat (+ m i) (+ i m)))
      (+0-commutes m)
      (lambda (k-1 almost)
        (trans
         (cong almost succ)
         (symm (+1-associates k-1 m)))))))

; commutativity of *
(claim a+b_+_c+d=c+b_+_a+d
  (Pi ((a Nat) (b Nat) (c Nat) (d Nat))
    (= Nat (+ (+ a b) (+ c d)) (+ (+ c b) (+ a d)))))
(define a+b_+_c+d=c+b_+_a+d
  (lambda (a b c d)
    (trans
      (cong (+commutes a b) (the (-> Nat Nat ) (lambda (x) (+ x (+ c d)))))
      (trans
        (symm (+associates b a (+ c d)))
        (trans
          (cong (+commutes a (+ c d)) (+ b))
          (trans
            (cong (symm (+associates c d a)) (+ b))
            (trans
              (+associates b c (+ d a))
              (trans
                (cong (+commutes b c) (the (-> Nat Nat) (lambda (x) (+ x (+ d a)))))
                (cong (+commutes d a) (+ (+ c b)))))))))))

; the identity (m * (n + 1)) = m + (n * m)
(claim *distrib-over-1
  (Pi ((m Nat) (n Nat))
    (= Nat (* (+ n 1) m) (+ m (* n m)))))
(define *distrib-over-1
  (lambda (m n)
    (ind-Nat
      m
      (lambda (i) (= Nat (* (+ n 1) i) (+ i (* n i))))
      (same 0)
      (lambda (i n+1*i=i+n*i)
        (trans
          (cong n+1*i=i+n*i (+ (+ n 1)))
          (a+b_+_c+d=c+b_+_a+d n 1 i (* n i)))))))

; m * 0 = 0 * m for all m
(claim *0-commutes
  (Pi ((m Nat))
    (= Nat (* m 0) (* 0 m))))
(define *0-commutes
  (lambda (m)
    (ind-Nat
      m
      (lambda (i) (= Nat (* i 0) (* 0 i)))
      (same 0)
      (lambda (k-1 almost)
        (cong almost (+ 0))))))

; the identity (m * n) = (n * m)
(claim *commutes
  (Pi ((m Nat) (n Nat))
    (= Nat (* m n) (* n m))))
(define *commutes
  (lambda (m n)
    (ind-Nat
      n
      (lambda (i) (= Nat (* m i) (* i m)))
      (*0-commutes m)
      (lambda (i m*i=i*m)
        (trans
          (cong m*i=i*m (+ m))
          (symm (*distrib-over-1 m i)))))))

; right distributivity of *
(claim a+b_+_c+d=a+c_+_b+d
  (Pi ((a Nat) (b Nat) (c Nat) (d Nat))
    (= Nat (+ (+ a b) (+ c d)) (+ (+ a c) (+ b d)))))
(define a+b_+_c+d=a+c_+_b+d
  (lambda (a b c d)
    (trans
      (symm (+associates a b (+ c d)))
      (trans
        (cong (+associates b c d) (+ a))
        (trans
          (cong (+commutes b c) (the (-> Nat Nat) (lambda (x) (+ a (+ x d)))))
          (trans
            (cong (symm (+associates c b d)) (+ a))
            (+associates a c (+ b d))))))))

(claim *distributes-over+_right
  (Pi ((a Nat) (b Nat) (c Nat))
    (= Nat (* (+ a b) c) (+ (* a c) (* b c)))))
(define *distributes-over+_right
  (lambda (a b c)
    (ind-Nat
      c
      (lambda (i) (= Nat (* (+ a b) i) (+ (* a i) (* b i))))
      (same 0)
      (lambda (i a+b_*i=a*i+b*i)
        (trans
          (cong a+b_*i=a*i+b*i (+ (+ a b)))
          (a+b_+_c+d=a+c_+_b+d a b (* a i) (* b i)))))))

; proof that every Nat is either zero or positive
; in particular, returns a proof that m = 0 or a proof that m = (add1 k) for some k
(claim either-0or>0
  (Pi ((m Nat)) (Either (= Nat m 0) (Sigma ((k Nat)) (= Nat m (add1 k))))))
(define either-0or>0
  (lambda (m)
    (ind-Nat
      m
      (lambda (i) (Either (= Nat i 0) (Sigma ((k Nat)) (= Nat i (add1 k)))))
      (left (same 0))
      (lambda (i almost)
        (right (cons i (same (add1 i))))))))

; an algebraic identity that'll come in handy later
(claim i=q*Sm+m->i+1=Sq*Sm
  (Pi ((i Nat) (m Nat) (q Nat))
    (-> (= Nat i (+ (* q (add1 m)) m)) (= Nat (add1 i) (* (add1 q) (add1 m))))))
(define i=q*Sm+m->i+1=Sq*Sm
  (lambda (i m q i=q*Sm+m)
    (trans
      (cong i=q*Sm+m succ)
      (trans
        (symm (+associates (* q (add1 m)) m 1))
        (trans
          (cong
            (*commutes (add1 m) 1)
            (+ (* q (add1 m))))
          (symm
            (*distributes-over+_right q 1 (add1 m))))))))

;;;;;;;;;;;;;;;;;;;;;;
; Equivalence Classes
;;;;;;;;;;;;;;;;;;;;;;

; we encode 'n = r mod m' by 'n = qm + r for some q'
; since this condition is only equivalent when 0 <= r < m
; we also require that m-1 = r + k for some k
(claim HasResidue
  (-> Nat Nat Nat U))
(define HasResidue
  (lambda (n r m)
    (Pair
      (Sigma ((k Nat)) (= Nat (pred m) (+ r k)))
      (Sigma ((q Nat)) (= Nat n (+ (* q m) r))))))

; construct the statement
;  [n] \in {[0], ..., [k]}
; where [x] denotes the residue class
; of x under the relation of congruence modulo m
(claim HasResidueIn
  (-> Nat Nat Nat U))
(define HasResidueIn
  (lambda (m n k)
    (rec-Nat
      k
      (HasResidue n 0 m)
      (lambda (i u)
        (Either
          (HasResidue n (add1 i) m)
          u)))))

; then, the statement we want to prove:
;  [n] \in {[0], ..., [m-1]}
; is encoded by the above with m = (add1 m-1)
;                          and k = m-1
(claim HasResidue<m
  (-> Nat Nat U))
(define HasResidue<m
  (lambda (m-1 n)
    (HasResidueIn (add1 m-1) n m-1)))

; constructs the type of the eliminator
; for the statement [n] \in {[0], ..., [k]}
; that is, the type of a function of (k + 1) arguments
; where f_i for 0 <= i < k takes a proof that [n] = [i]
; and outputs a value of type a
(claim ResidueEliminators
  (-> U Nat Nat Nat U))
(define ResidueEliminators
  (lambda (a m n k)
    (rec-Nat
      k
      (-> (-> (HasResidue n 0 m) a) a)
      (lambda (i u)
        (-> (-> (HasResidue n (add1 i) m) a) u)))))

; constructs the type of a pair
; which contains the functions for eliminating
; the statement [n] \in {{0], ..., [k]}
; i.e, constructs the pair (f_k, f_{k-1}, f_{k-2}, ..., f_0)
; where f_i takes a proof that [n] = [i] and outputs a value of type a
(claim Pair-ResidueEliminators
  (-> U Nat Nat Nat U))
(define Pair-ResidueEliminators
  (lambda (a m n k)
    (rec-Nat
      k
      (-> (HasResidue n 0 m) a)
      (lambda (i u)
        (Pair (-> (HasResidue n (add1 i) m) a) u)))))

(claim make-Pair-ResidueEliminators
  (Pi ((a U) (m Nat) (n Nat) (k Nat))
      (-> (Pi ((j Nat)) (-> (HasResidue n j m) a))
          (Pair-ResidueEliminators a m n k))))
(define make-Pair-ResidueEliminators
  (lambda (a m n k onr=)
    (ind-Nat
       k
       (Pair-ResidueEliminators a m n)
       (onr= 0)
       (lambda (j almost)
         (cons (onr= (add1 j)) almost)))))

; given an eliminator for the statement [n] \in {[0], ..., [k]}
; and a pair containing the functions (f_k, ..., f_0)
; apply the eliminator to the pair to return a value of type a
(claim apply-Pair-ResidueEliminators
  (Pi ((a U) (m Nat) (n Nat) (k Nat))
    (-> (ResidueEliminators a m n k) (Pair-ResidueEliminators a m n k) a)))
(define apply-Pair-ResidueEliminators
  (lambda (a m n k)
    (ind-Nat
      k
      (lambda (i) (-> (ResidueEliminators a m n i) (Pair-ResidueEliminators a m n i) a))
      (lambda (f p) (f p))
      (lambda (i almost)
        (lambda (f p)
          (almost (f (car p)) (cdr p)))))))

; constructs the special eliminator for the statement
;  [n] \in {[0], ..., [k]}
; which ignores the argument functions and just returns a constant value
(claim constant-ResidueEliminator
  (Pi
    ((a U) (m Nat) (n Nat) (k Nat))
    (-> a (ResidueEliminators a m n k))))
(define constant-ResidueEliminator
  (lambda (a m n k b)
    (ind-Nat
      k
      (lambda (i) (ResidueEliminators a m n i))
      (lambda (f) b)
      (lambda (i almost) (lambda (f) almost)))))

; an eliminator for the statement [n] \in {[0], ..., [m-1]}
; that is, given proof that [n] \in {[0], ..., [m-1]}
; and functions f_{m-1}, ..., f_0
; s.t f_i takes a proof that [n] = [i] and outputs a value of type a
; this eliminator returns a value of type a
(claim elim-HasResidue<m
  (Pi
    ((a U) (m-1 Nat) (n Nat))
    (-> (HasResidue<m m-1 n) (ResidueEliminators a (add1 m-1) n m-1))))
(define elim-HasResidue<m
  (lambda (a m-1 n)
    (ind-Nat
      m-1
      (lambda (i) (-> (HasResidueIn (add1 m-1) n i) (ResidueEliminators a (add1 m-1) n i)))
      ; x is a proof of [n] \in {[0]}
      ; or equivalently [n] = [0]
      ; f is a function from ([n] = [0]) -> a
      (lambda (x f) (f x))
      (lambda (i almost) ; almost eliminates [n] \in {[0], ..., [i]}
        ; x is a proof of [n] \in {[0], ..., [i+1]} which is Either ([n] = [i+1]) or [n] \in {[0], ..., [i]}
        ; f is a function from ([n] = [i+1]) \to a
        (lambda (x f) 
          (ind-Either
            x
            ; we will be producing a function of i+1 arguments
            (lambda (_) (ResidueEliminators a (add1 m-1) n i))
            ; in the 'left' case, we have a proof of [n] = [k+1]
            ; so we can apply f to l, and ignore the rest of the functions with const
            (lambda (l) (constant-ResidueEliminator a (add1 m-1) n i (f l)))
            ; in the right case, we have a proof of [n] \in {[0], ..., [k]} so we apply almost to it
            (lambda (p) (almost p))))))))

(claim make-HasResidue<m
  (Pi ((m-1 Nat) (i Nat) (r Nat))
      (-> (HasResidue i r (add1 m-1)) (HasResidue<m m-1 i))))
(define make-HasResidue<m
  (lambda (m-1 i r ~class)
    ; let k denote the number such that m-1 = r+k
    ; the value of k is given by (car (car ~class))
    ; the proof that m-1 = r+k is given by (cdr (car ~class))
    (replace
      (symm (cdr (car ~class)))    ; the statement r+k=m-1
      (HasResidueIn (add1 m-1) i) 
      (ind-Nat
        (car (car ~class))  ; the k such that m-1 = r + k
                            ; we need k many `right` constructors
        
        (lambda (k) (HasResidueIn (add1 m-1) i (+ r k)))
        
        (ind-Either
          ; we take cases on whether r=0 or r>0
          (either-0or>0 r)
          (lambda (_) (HasResidueIn (add1 m-1) i r))

          ; CASE: r=0, this is the 'rightmost' case in our Either type, so we don't need a `left`
          (lambda (r=0)
            (replace
              (symm r=0)
              (HasResidueIn (add1 m-1) i)
              (replace
                r=0
                (lambda (x) (HasResidue i x (add1 m-1)))
                ~class)))

          ; CASE: r>0, in this case, we need exactly one `left`
          (lambda (r>0)
            (replace
              (symm (cdr r>0))
              (HasResidueIn (add1 m-1) i)
              (left
                (replace
                  (cdr r>0)
                  (lambda (x) (HasResidue i x (add1 m-1)))
                  ~class)))))
        
        (lambda (_ almost) (right almost))))))
      

; this is the 'wrap around' case
; i.e, given that [i] = [m-1], we know [i+1] = [0]
; we identify this case by asserting that the difference between
; the remainder j and m-1 is 0
; which is encoded by (= Nat (car (car r=j)) 0)
(claim ~i=m-1->~Si=0
  (Pi ((m-1 Nat) (i Nat) (j Nat) (r=j (HasResidue i j (add1 m-1))))
      (-> (= Nat (car (car r=j)) 0)
          (HasResidue<m m-1 (add1 i)))))
(define ~i=m-1->~Si=0
  (lambda (m-1 i j r=j k:m-1=j+k_=0)
    (make-HasResidue<m
       m-1 (add1 i) 0
       (cons
          ; our remainder is zero, so the difference between m-1 and the remainder is m-1
          (cons
            m-1
            (+commutes m-1 0))
          (cons
            ; note that our value of q must be incremented now
            (add1 (car (cdr r=j)))
            (i=q*Sm+m->i+1=Sq*Sm
              i m-1 (car (cdr r=j))
              ;     ^^^^^^^^^^^^^^^
              ;        value of q

              ; we know that i=q*S(m-1) + j and that j = m-1
              ; so we combine these to get i=q*S(m-1) + m-1 which is the required form of our identity
              (replace
                ; this expression resolves to the proof that j=m-1
                (symm (replace
                       k:m-1=j+k_=0
                       (lambda (x) (= Nat m-1 (+ j x)))
                       (cdr (car r=j))))
                (lambda (x) (= Nat i (+ (* (car (cdr r=j)) (add1 m-1)) x)))
                (cdr (cdr r=j)))))))))

; this is the 'easy' case
; i.e, given that [i] = [j] and j < m-1, we know that [j+1] \in {[0], ..., [m-1]}
; so we can safely set [i+1] = [j+1]
; we identify this case by asserting that the difference between j and m-1
; is strictly positive. this is encoded via the last argument of type
; \exists k. (car (car r=j)) = k + 1
(claim ~i=j&j<m-1->~Si=Sj
  (Pi ((m-1 Nat) (i Nat) (j Nat) (r=j (HasResidue i j (add1 m-1))))
      (-> (Sigma ((k Nat)) (= Nat (car (car r=j)) (add1 k)))
          (HasResidue<m m-1 (add1 i)))))
(define ~i=j&j<m-1->~Si=Sj
  (lambda (m-1 i j r=j k:m-1=j_k_>0)
     (make-HasResidue<m
        m-1 (add1 i) (add1 j)
        (cons
          ; since our new remainder is now j+1
          ; we have to ensure that there is still some k such that m-1 = (j+1) + k
          ; luckily, we know that m-1 j+(car (car r=j))
          ; and we know that (car (car r=j)) = k + 1 for some k
          ; so we just need to do some algebra to get (j+1) + k = m-1
          (cons
            (car k:m-1=j_k_>0) ; the value of k from the above discussion
            (trans
              ; this resolves to m-1 = j + (k + 1)
              (replace
                 (cdr k:m-1=j_k_>0)
                 (lambda (x) (= Nat m-1 (+ j x)))
                 (cdr (car r=j)))
              (trans
                ; this resolves to j + (k + 1) = j + (1 + k)
                (cong (+commutes (car k:m-1=j_k_>0) 1) (+ j))
                ; this resolves to j + (1 + k) = (j + 1) + k
                (+associates j 1 (car k:m-1=j_k_>0)))))
          ; our value of q doesn't change
          ; so we can simple add1 on both sides to get a valid Sigma type for i + 1
          (cons
            (car (cdr r=j))
            (cong (cdr (cdr r=j)) succ))))))

(claim find-residue
  (Pi ((m-1 Nat) (n Nat)) (HasResidue<m m-1 n)))
(define find-residue
  (lambda (m-1 n)
    ; use induction, like in the chapter
    (ind-Nat n
      (HasResidue<m m-1)

      ; base case: proof that [0] = [0]
      (make-HasResidue<m m-1 0 0
        (cons
          (cons m-1 (+commutes m-1 0))         ; m-1 = 0 + m-1
          (cons 0 (*commutes (add1 m-1) 0))))  ;   0 = 0 * (add1 m-1) + 0

      ; inductive step, given a proof that [i]   \in {[0], ..., [m-1]}
      ;                          show that [i+1] \in {[0], ..., [m-1]}
      (lambda (i ~i-in-0:m-1)
        (apply-Pair-ResidueEliminators
          (HasResidue<m m-1 (add1 i))    ; we will produce a proof that [i] \in {[0], ..., [m-1]}
          (add1 m-1) i m-1               ; we will operate on residues of i modulo (add1 m-1)

          (elim-HasResidue<m (HasResidue<m m-1 (add1 i)) m-1 i ~i-in-0:m-1) ; this is our eliminator
          (make-Pair-ResidueEliminators
            (HasResidue<m m-1 (add1 i)) (add1 m-1) i m-1

            ; how to turn [i] = [j] into [i+1] \in {[0], ..., [m-1]}
            (lambda (j ~i=j)
              (ind-Either
                ; take cases on whether (m-1)-j =0 or >0
                (either-0or>0 (car (car ~i=j)))
                (lambda (_) (HasResidue<m m-1 (add1 i)))

                ; CASE: (m-1)-j = 0, in this case we need to 'wrap around' back to [i+1]=[0]
                (~i=m-1->~Si=0 m-1 i j ~i=j)

                ; CASE: (m-1)-j > 0, in this case we can simply increase the remainder by one
                (~i=j&j<m-1->~Si=Sj m-1 i j ~i=j)))))))))

                